@model BanSach.Models.KhachHang

@{
    ViewBag.Title = "EditAD";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container my-5 p-4 bg-light rounded-sm">
    <h2 class="text-center" style="color:black;">Cập nhật Thông Tin</h2>
    <hr class="mb-5" />

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.IDkh)
            @Html.HiddenFor(model => model.TKhoan) <!-- Đảm bảo TKhoan được gửi lên server -->

            <div class="form-group row">
                @Html.LabelFor(model => model.TenKH, "Họ và Tên", htmlAttributes: new { @class = "col-md-3 col-form-label font-weight-bold" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.TenKH, new { htmlAttributes = new { @class = "form-control rounded-sm", style = "border: 1px solid #ccc;" } })
                    @Html.ValidationMessageFor(model => model.TenKH, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.SoDT, "Số điện thoại", htmlAttributes: new { @class = "col-md-3 col-form-label font-weight-bold" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.SoDT, new { htmlAttributes = new { @class = "form-control rounded-sm", style = "border: 1px solid #ccc;" } })
                    @Html.ValidationMessageFor(model => model.SoDT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Email, "Email", htmlAttributes: new { @class = "col-md-3 col-form-label font-weight-bold" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control rounded-sm", style = "border: 1px solid #ccc;" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.TKhoan, "Tài khoản", htmlAttributes: new { @class = "col-md-3 col-form-label font-weight-bold" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.TKhoan, new { htmlAttributes = new { @class = "form-control rounded-sm", @readonly = "readonly", style = "border: 1px solid #ccc;" } })
                    @Html.ValidationMessageFor(model => model.TKhoan, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.MKhau, "Mật khẩu", htmlAttributes: new { @class = "col-md-3 col-form-label font-weight-bold" })
                <div class="col-md-9">
                    <div class="input-group">
                        @Html.EditorFor(model => model.MKhau, new { htmlAttributes = new { @class = "form-control rounded-sm", style = "border: 1px solid #ccc;", @type = "password", @readonly = "readonly", id = "passwordField", maxlength = "20" } })
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-success rounded-sm" onclick="togglePasswordVisibility()">Hiện</button>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.MKhau, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group text-center mt-5">
                <div class="col-md-12">
                    <button type="submit" class="btn btn-success btn-lg px-3 rounded-sm">Lưu thông tin</button>
                </div>
            </div>
        </div>
    }
</div>

<script>
    function togglePasswordVisibility() {
        const passwordField = document.getElementById('passwordField');
        const toggleButton = passwordField.nextElementSibling.querySelector('button');
        if (passwordField.type === "password") {
            passwordField.type = "text";
            toggleButton.textContent = "Ẩn";
        } else {
            passwordField.type = "password";
            toggleButton.textContent = "Hiện";
        }
    }
</script>
