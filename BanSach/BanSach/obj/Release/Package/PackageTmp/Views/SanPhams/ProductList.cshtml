@using PagedList.Mvc;
@model PagedList.IPagedList<BanSach.Models.SanPham>

@{
    ViewBag.Title = "Sách";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/PagedList.css" rel="stylesheet" />
<link href="~/Content/css/ProductList.css" rel="stylesheet" />

<h3 class="page-title text-white">Danh sách sản phẩm</h3>

<div class="container">
    <div class="row d-inline-flex">
        <!-- Bộ lọc giá và Nhà xuất bản -->
        <div class="col-12 col-md-4 mb-2 d-flex gap-3">
            <!-- Bộ lọc giá -->
            <div class="price-filter p-2 shadow-sm rounded bg-white mb-1 mt-2">
                <form method="get" action="/SanPhams/FilterByPrice">
                    <h4 class="filter-title mb-3 text-primary text-dark">GIÁ</h4>
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" id="price1" name="priceRange" value="0-150000"
                               @(Request["priceRange"] != null && Request["priceRange"].Contains("0-150000") ? "checked" : "")>
                        <label class="form-check-label" for="price1">0₫ - 150,000₫</label>
                    </div>
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" id="price2" name="priceRange" value="150000-300000"
                               @(Request["priceRange"] != null && Request["priceRange"].Contains("150000-300000") ? "checked" : "")>
                        <label class="form-check-label" for="price2">100,000₫ - 300,000₫</label>
                    </div>
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" id="price3" name="priceRange" value="300000-500000"
                               @(Request["priceRange"] != null && Request["priceRange"].Contains("300000-500000") ? "checked" : "")>
                        <label class="form-check-label" for="price3">300,000₫ - 500,000₫</label>
                    </div>
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" id="price4" name="priceRange" value="500000-700000"
                               @(Request["priceRange"] != null && Request["priceRange"].Contains("500000-700000") ? "checked" : "")>
                        <label class="form-check-label" for="price4">500,000₫ - 700,000₫</label>
                    </div>
                    <div class="form-check mb-3">
                        <input type="checkbox" class="form-check-input" id="price5" name="priceRange" value="700000-up"
                               @(Request["priceRange"] != null && Request["priceRange"].Contains("700000-up") ? "checked" : "")>
                        <label class="form-check-label" for="price5">700,000₫ - Trở Lên</label>
                    </div>

                    <button type="submit" class="btn btn-success rounded-sm w-100 fw-bold">Áp dụng</button>
                </form>
            </div>
        </div>

        <div class="col-12 col-md-4 mb-2 d-flex gap-3">
            <!-- Bộ lọc nhà xuất bản -->
            <div class="price-filter p-2 shadow-sm rounded bg-white mb-1 mt-2">
                <form method="get" action="/SanPhams/FilterByPublisher">
                    <h4 class="filter-title mb-3 text-primary text-dark">Nhà Xuất Bản</h4>
                    @{
                        var availablePublishers = ViewBag.AvailablePublishers as List<string> ?? new List<string>(); // Đảm bảo luôn có danh sách (rỗng nếu null)
                    }
                    @if (availablePublishers.Any())
                    {
                        foreach (var publisher in availablePublishers)
                        {
                            bool isChecked = Request["publisherFilters"] != null && Request["publisherFilters"].Contains(publisher);
                            <div class="form-check mb-2">
                                <input type="checkbox" class="form-check-input" name="publisherFilters" value="@publisher" @(isChecked ? "checked" : "") />
                                <label class="form-check-label">@publisher</label>
                            </div>
                        }
                    }
                    else
                    {
                        <p>Nhấn lọc để tìm nhanh hơn</p>
                    }

                    <button type="submit" class="btn btn-success rounded-sm w-100 fw-bold">Lọc</button>
                </form>
            </div>
        </div>

        <div class="col-12 col-md-4 mb-2 d-flex gap-3">
            <!-- Bộ lọc sắp xếp -->
            <form method="get" action="/SanPhams/ProductList">
                <div class="d-flex justify-content-between">
                    <div class="d-flex align-items-center gap-2">
                        <label for="sortOrder" class="text-primary">Sắp xếp theo:</label>
                        <select id="sortOrder" name="sortOrder" class="form-select" onchange="this.form.submit()">
                            <option value="price_asc" @(Request["sortOrder"] == "price_asc" ? "selected" : "")>Giá từ thấp đến cao</option>
                            <option value="price_desc" @(Request["sortOrder"] == "price_desc" ? "selected" : "")>Giá từ cao đến thấp</option>
                        </select>
                    </div>
                </div>
            </form>
        </div>

        <div class="text-light">
            <hr />
        </div>

        <!-- Danh sách sản phẩm -->
        <div class="col-12 col-md-12 mb-1">
            <div class="row row-cols-2">
                @if (Model != null && Model.Any())
                {
                    foreach (var item in Model)
                    {
                        <div class="col-6 col-sm-6 col-md-4 col-lg-3 col-xl-2 d-flex align-items-stretch gap-1 p-1 mb-lg-0">
                            <div class="card-pro @(item.TrangThaiSach == "Hết hàng" ? "out-of-stock" : "")">
                                <a href="@Url.Action("TrangSP", "SanPhams", new { id = item.IDsp })">
                                    <img src="~/Content/img/@item.HinhAnh" class="img-fluid" alt="@item.TenSP" />
                                    <p class="availability @(item.TrangThaiSach == "Hết hàng" ? "out-of-stock" : "in-stock")">
                                        @item.TrangThaiSach
                                    </p>
                                    <p class="product-name ">@item.TenSP</p>
                                </a>

                                @if (item.KhuyenMai != null && item.KhuyenMai.MucGiamGia > 0)
                                {
                                    var giaBan = item.GiaBan;
                                    var mucGiamGia = item.KhuyenMai?.MucGiamGia ?? 0;
                                    var giaSauGiam = giaBan * (1 - (decimal)mucGiamGia / 100.0m);

                                    <p class="price-wrapper">
                                        <span class="old-price me-2">
                                            @string.Format("{0:N0} VND", giaBan)
                                        </span>
                                        <span class="discount-badge" disabled>
                                            -@mucGiamGia%
                                        </span>
                                    </p>
                                    <p class="price">
                                        @string.Format("{0:N0} VND", giaSauGiam)
                                    </p>
                                }
                                else
                                {
                                    <p class="price">
                                        @string.Format("{0:N0} VND", item.GiaBan)
                                    </p>
                                }

                                @if (item.TrangThaiSach != "Hết hàng")
                                {
                                    <button class="btn-add-to-cart" onclick="themthanhcong(event, '@item.IDsp')">
                                        <i class="fas fa-cart-plus"></i> Thêm vào giỏ hàng
                                    </button>
                                }
                                else
                                {
                                    <button class="btn-add-to-cart-hethang" disabled>
                                        <i class=""></i> Hết hàng
                                    </button>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-secondary">Không có sản phẩm nào hiển thị.</p>
                }
            </div>

        </div>




    </div>
</div>
<!-- Phân trang -->
<div class="sotrang d-flex justify-content-center">
    @Html.PagedListPager(Model, page => Url.Action("ProductList", new { page, priceRange = Request["priceRange"], publisherFilters = Request["publisherFilters"] }), new PagedListRenderOptions()
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        LinkToIndividualPageFormat = "{0}"
    })
</div>
<div id="notification-container" style="position: fixed; bottom: 10px; left: 10px; display: flex; flex-direction: column; gap: 10px; z-index: 1000;">
    <!-- Các thông báo sẽ được thêm vào đây -->
</div>

<script>
    function themthanhcong(event, productId) {
        // Ngăn chặn hành vi mặc định của nút
        event.preventDefault();

        // Gửi yêu cầu tới server để thêm sản phẩm vào giỏ hàng
        fetch(`/ShoppingCart/AddToCart/${productId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => {
                // Tạo thông báo mới
                const notification = document.createElement('div');
                notification.className = 'notification';

                if (response.ok) {
                    notification.textContent = 'Thêm sản phẩm thành công';
                    notification.style.backgroundColor = '#4CAF50'; // Màu xanh cho thông báo thành công
                } else {
                    notification.textContent = 'Có lỗi xảy ra khi thêm sản phẩm vào giỏ hàng. Vui lòng thử lại.';
                    notification.style.backgroundColor = '#f44336'; // Màu đỏ cho thông báo lỗi
                }

                // Thêm thông báo vào container
                document.getElementById('notification-container').appendChild(notification);

                // Kích hoạt hiệu ứng hiển thị
                setTimeout(() => {
                    notification.classList.add('show');
                }, 10); // Trì hoãn một chút để transition hoạt động

                // Ẩn thông báo sau 3 giây
                setTimeout(() => {
                    notification.classList.remove('show');
                    notification.classList.add('hide');

                    // Xóa thông báo sau khi hiệu ứng ẩn hoàn tất
                    setTimeout(() => {
                        notification.remove();
                    }, 500); // Thời gian khớp với transition
                }, 3000);
            })
            .catch(error => {
                // Tạo thông báo lỗi
                const notification = document.createElement('div');
                notification.className = 'notification';
                notification.textContent = 'Có lỗi xảy ra khi thêm sản phẩm vào giỏ hàng. Vui lòng thử lại.';
                notification.style.backgroundColor = '#f44336'; // Màu đỏ cho thông báo lỗi

                // Thêm thông báo vào container
                document.getElementById('notification-container').appendChild(notification);

                // Kích hoạt hiệu ứng hiển thị
                setTimeout(() => {
                    notification.classList.add('show');
                }, 10);

                // Ẩn thông báo sau 3 giây
                setTimeout(() => {
                    notification.classList.remove('show');
                    notification.classList.add('hide');

                    // Xóa thông báo sau khi hiệu ứng ẩn hoàn tất
                    setTimeout(() => {
                        notification.remove();
                    }, 500); // Thời gian khớp với transition
                }, 3000);
            });
    }
</script>

<style>
    .notification {
        padding: 20px;
        border-radius: 5px;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0; /* Bắt đầu ẩn */
        transform: translateY(20px); /* Dịch chuyển xuống */
        transition: opacity 0.5s ease, transform 0.5s ease; /* Hiệu ứng mượt */
    }

        .notification.show {
            opacity: 1; /* Hiển thị */
            transform: translateY(0);
            transition: opacity 0.5s ease, transform 0.5s ease; /* Quay lại vị trí ban đầu */
        }

        .notification.hide {
            opacity: 0; /* Ẩn */
            transform: translateY(20px);
            transition: opacity 0.5s ease, transform 0.5s ease; /* Dịch chuyển xuống khi ẩn */
        }
</style>




